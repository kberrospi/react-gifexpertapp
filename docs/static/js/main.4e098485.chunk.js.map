{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAU,IAFE,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAqBhD,OACI,0BAAMC,SAZW,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAe,OAOf,2BACIO,KAAK,OACLC,MAAST,EACTU,SAtBc,SAAEP,GAExBF,EAAeE,EAAEQ,OAAOF,Y,uBCRnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAeZM,GAfY,4CAAH,sDCCPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IACtC,OACI,yBAAKc,UAAU,QACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,+BAAMA,EAAN,OCDCO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECFf,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAwBxC,OAjBAC,qBAAW,WACPxB,EAASC,GACRwB,MAAM,SAAAC,GAIHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAMlB,CAAEpB,IAGEqB,EDpB0BK,CAAc1B,GAAlCa,EAF0B,EAE/BN,KAAaa,EAFkB,EAElBA,QAGrB,OACI,oCACMA,GAAW,uBAAGJ,UAAU,oCAAb,cACb,gCAAOhB,EAAP,KACA,yBAAKgB,UAAU,+CACTH,EAAOJ,KAAK,SAAEC,GAAF,OACV,kBAAC,EAAD,iBACSA,EADT,CAEIiB,IAAOjB,EAAIC,YEdtBiB,EAAe,WAAO,IAAD,EAEM1C,mBAAS,CAAC,YAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAK9B,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAiBA,IAE9B,6BAEA,4BACM4C,EAAWpB,KAAK,SAAAnB,GAAC,OACX,kBAAC,EAAD,CACIqC,IAAOrC,EACPU,SAAYV,UCfxCwC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.4e098485.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState( '' );\r\n\r\n    const handleInputchange = ( e ) => {\r\n\r\n        setInputValue( e.target.value );\r\n\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue, ...cats ] );\r\n            setInputValue( '' );\r\n        } \r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit= { handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value= { inputValue }\r\n                onChange= { handleInputchange } \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async ( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category) }&limit=10&api_key=fqI8SRyjJLGV834IKjrTgZyhUh1KyISS`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    })\r\n\r\n    \r\n    return gifs ;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={ url } alt={ title } /> \r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n    \r\n\r\n    return (\r\n        <>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n            <h3> { category } </h3>\r\n            <div className=\"card-grid animate__animated animate__fadeIn\">\r\n                { images.map( ( img ) =>\r\n                    <GifGridItem \r\n                        { ...img }\r\n                        key= { img.id }\r\n                    />\r\n                ) }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    \r\n    useEffect( () => {\r\n        getGifs( category )\r\n        .then( imgs => {\r\n\r\n           \r\n                \r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n             })\r\n\r\n            \r\n\r\n        })\r\n    }, [ category ])\r\n   \r\n\r\n    return state; \r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Shooter',]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2> GifExpertApp </h2>\r\n            <AddCategory setCategories= { setCategories } />\r\n\r\n            <hr></hr>\r\n            \r\n            <ol>\r\n                { categories.map( e  => (\r\n                        <GifGrid \r\n                            key= { e }\r\n                            category= { e }\r\n                         />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}